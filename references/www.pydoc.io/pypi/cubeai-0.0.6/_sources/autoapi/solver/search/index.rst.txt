:mod:`solver.search`
====================

.. py:module:: solver.search







Module Contents
---------------


Classes
~~~~~~~

.. autoapisummary::

   solversearchSearchProblem
   solversearchNode
   solversearchSearchNode





Functions
~~~~~~~~~
.. autoapisummary::


   solversearch_cost_so_far
   solversearchgeneric_search
   solversearchdepth_first_search
   solversearchbreadth_first_search
   solversearchuniform_cost_search
   solversearchnull_heuristic
   solversearcha_star_search


.. py:class:: SearchProblem

   This class outlines the structure of a search problem, but doesn't implement
   any of the methods (in object-oriented terminology: an abstract class).
   
   You do not need to change anything in this class, ever.

   

   

   
   
   .. method:: get_start_state()
   
      
      Returns the start state for the search problem
      
   

   
   
   .. method:: is_goal_state(state)
   
      
      state: Search state
      
      Returns True if and only if the state is a valid goal state
      
   

   
   
   .. method:: get_successors(state)
   
      
      state: Search state
      
      For a given state, this should return a list of triples,
      (successor, action, stepCost), where 'successor' is a
      successor to the current state, 'action' is the action
      required to get there, and 'stepCost' is the incremental
      cost of expanding to that successor
      
   

   
   
   .. method:: get_cost_of_actions(actions)
   
      
      actions: A list of actions to take
      
      This method returns the total cost of a particular sequence of actions.  The sequence must
      be composed of legal moves
      
   
   



.. py:class:: Node(data,parent=None)

   A simple node class which saves arbitrary data and a pointer to a parent.

   

   

   
   
   .. method:: __init__(data,parent=None)
   
      
      Initializes a new node
      :param data: data to save
      :param parent: node's parent (Node object)
      
   

   
   
   .. method:: is_root()
   
      
      :return: True if this node has a parent, False otherwise
      
   

   
   
   .. method:: path_from_root()
   
      
      :return: a list of nodes which corresponds to a path from the root
      to this node
      
   
   



.. py:class:: SearchNode(state,action,cost,parent=None)

   a node where the data saved is the (state,action,cost) triplet 

   

   

   
   
   .. method:: __init__(state,action,cost,parent=None)
   
      
   
   





.. function:: _cost_so_far(node)

   
   also referred to as `g' in the class notation 
   






.. function:: generic_search(problem,data_structure,**kwargs)

   
   Implements a generic search algorithm which. I.e. this algorithm
   can be used with different data structures as fringe.
   
   :param problem: The search problem instance
   :param data_structure: A data structure for the fringe (e.g. Stack)
   :param kwargs: Additional keyword arguments for the data structure init
   :return: A list of actions if a goal state is found, None otherwise
   






.. function:: depth_first_search(problem)

   
   Search the deepest nodes in the search tree first.
   






.. function:: breadth_first_search(problem)

   
   Search the shallowest nodes in the search tree first.
   






.. function:: uniform_cost_search(problem)

   
   Search the node of least total cost first.
   






.. function:: null_heuristic(*_)

   
   A heuristic function estimates the cost from the current state to the nearest
   goal in the provided SearchProblem.  This heuristic is trivial.
   






.. function:: a_star_search(problem,heuristic=null_heuristic)

   
   Search the node that has the lowest combined cost and heuristic first.
   



