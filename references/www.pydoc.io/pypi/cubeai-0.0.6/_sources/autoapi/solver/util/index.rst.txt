:mod:`solver.util`
==================

.. py:module:: solver.util







Module Contents
---------------


Classes
~~~~~~~

.. autoapisummary::

   solverutilStack
   solverutilQueue
   solverutilPriorityQueue
   solverutilPriorityQueueWithFunction





Functions
~~~~~~~~~
.. autoapisummary::


   solverutilmanhattan_distance


.. py:class:: Stack()

   "A container with a last-in-first-out (LIFO) queuing policy.

   

   

   
   
   .. method:: __init__()
   
      
   

   
   
   .. method:: push(item)
   
      
      "Push 'item' onto the stack
      
   

   
   
   .. method:: pop()
   
      
      "Pop the most recently pushed item from the stack
      
   

   
   
   .. method:: is_empty()
   
      
      "Returns true if the stack is empty
      
   
   



.. py:class:: Queue()

   "A container with a first-in-first-out (FIFO) queuing policy.

   

   

   
   
   .. method:: __init__()
   
      
   

   
   
   .. method:: push(item)
   
      
      "Enqueue the 'item' into the queue
      
   

   
   
   .. method:: pop()
   
      
      Dequeue the earliest enqueued item still in the queue. This
      operation removes the item from the queue.
      
   

   
   
   .. method:: is_empty()
   
      
      "Returns true if the queue is empty
      
   
   



.. py:class:: PriorityQueue()

   Implements a priority queue data structure. Each inserted item
   has a priority associated with it and the client is usually interested
   in quick retrieval of the lowest-priority item in the queue. This
   data structure allows O(1) access to the lowest-priority item.
   
   Note that this PriorityQueue does not allow you to change the priority
   of an item.  However, you may insert the same item multiple times with
   different priorities.

   

   

   
   
   .. method:: __init__()
   
      
   

   
   
   .. method:: push(item,priority)
   
      
   

   
   
   .. method:: pop()
   
      
   

   
   
   .. method:: is_empty()
   
      
   
   



.. py:class:: PriorityQueueWithFunction(priority_function)

   Implements a priority queue with the same push/pop signature of the
   Queue and the Stack classes. This is designed for drop-in replacement for
   those two classes. The caller has to provide a priority function, which
   extracts each item's priority.

   

   

   
   
   .. method:: __init__(priority_function)
   
      
      "priority_function (item) -> priority
      
   

   
   
   .. method:: push(item)
   
      
      "Adds an item to the queue with priority from the priority function
      
   
   





.. function:: manhattan_distance(xy1,xy2)

   
   "Returns the Manhattan distance between points xy1 and xy2 in R^2
   



